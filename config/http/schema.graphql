scalar Hour

type User {
	id: Int!
	firstName: String!
	lastName: String!
	phoneNumber: String!
	email: String!
}

type Restaurant {
	id: Int!
	category: [Category!]
	dishes: [Dish!]
	openHour: Hour!
	closeHour: Hour!
	openDays: [Weekdays!]!
	city: City!
	name: String!
	description: String
	phoneNumber: String!
	address: String!
}

type Dish {
	id: Int!
	category: Category
	restaurant: Restaurant!
	name: String!
	price: Float!
	cookTime: Int!
}

type City {
	id: Int!
	code: Int!
	name: String!
	uf: String!
}

type Category {
	id: Int!
	name: String!
	dishes: [Dish!]
	restaurants: [Restaurant!]
}

input createUserInput {
	firstName: String!
	lastName: String!
	phoneNumber: String!
	email: String!
	senha: String!
}

input createDishInput {
	name: String!
	restaurantId: Int!
	categoryId: Int
	price: Float!
	cookTime: Int!
}

input updateDishInput {
	id: Int!
	name: String!
	categoryId: Int
	price: Float!
	cookTime: Int!
}

input createRestaurantInput {
	categoryId: Int!
	openHour: Hour!
	closeHour: Hour!
	openDays: [Weekdays!]!
	cityId: Int!
	name: String!
	description: String
	phoneNumber: String!
	address: String!
}

input updateRestaurantInput {
	id: Int!
	openHour: Hour
	closeHour: Hour
	openDays: [Weekdays!]
	name: String
	description: String
	phoneNumber: String
	address: String
}

input updateCategoryInput {
    id: Int!
    name: String!
}

type Query {
	user(id: Int!): User!
	restaurant(id: Int): [Restaurant!]
	dish(id: Int): [Dish!]
	category(id: Int): [Category!]
}

type Mutation {
	createUser(input: createUserInput!): User!
	createDish(input: createDishInput!): Dish!
	createCategory(name: String!): Boolean!
	createRestaurant(input: createRestaurantInput!): Restaurant!
	updateRestaurant(input: updateRestaurantInput!): Restaurant!
	updateDish(input: updateDishInput!): Dish!
	updateCategory(input: updateCategoryInput!): Boolean!
}


enum Weekdays {
	MONDAY
	TUESDAY
	WEDNESDAY
	THURSDAY
	FRIDAY
	SATURDAY
	SUNDAY
}
